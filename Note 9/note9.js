// 9 - ObjectID

/*
object id in mongodb.
when we store a doc in mondo, it sets the value of id to a long string
_id: 5a68fdc3615eda645bc6bdec
every 2 char represents a byte.

12 bytes
    4 bytes: timestamp. time the doc was created.
    3 bytes: machine identifier.
    2 bytes: process identifier. 
    3 bytes: counter. if we are on the same machine with the same process, same machine
            at the same sec but generate 2 different doc, the counter byte will be different.
        
Very low chance scenario where an id can be the same.
1 byte = 8 bits
can represents 2^8 = 256 different numbers.
last 3 bytes for counter.
2^24 = 16M
so if at the same sec in the same machine with the same process, we generate more than 
16m doc, this counter will overflow and may end up duplicate id. 

why mondodb dont have a mechanism that guarantees uniqueness like SQL that has 
auto increment (at the cost of scalability).
the id on mongo is not generated by mongodb, but by mongodb driver.
Driver --> MongoDB
which means we dont have to wait for mongoDB to generate a new unique id,
which is why app built on mongodb are highly scalable. 
can have several instance of mongodb and dont have to talk to central place
to get a unique id. 
the driver itself can generate an almost unique id from the 12bytes.

when building app with node and express, mongoose is an abstractin over mongodb
driver.
mongoose talks to mongodb driver and generates a new id.
*/

// To explcitly generate an ID

const mongoose = require("mongoose");

const id = new mongoose.Types.ObjectId();
console.log(id);
// new ObjectId('65c0172ed03ccb0fca20c723')
// generated id in memory.

// to get timestamp.  the first 4 bytes
console.log(id.getTimestamp());

// to validate object id.
const isValid = mongoose.Types.ObjectId.isValid("1234");
console.log(isValid);
